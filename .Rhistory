install.packages("KernSmooth")
x <- list(2, "a", "b", TRUE)
x[[2]]
class( x[[2]] )
is.vector( x[[2]] )
x <- 1:4
y <- 2:3
x+y
search()
cube <- function(x, n) {
x^3
}
cube(3)
x<-1:10
if(x>5){
x<-0
}
#
f<-function(x){
g<-function(y){
y+z
}
z<-4
x+g(x)
}
z<-10
f(3)
x<-5
y<-if(x<3){
NA
}else{
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
h
h(10)
f<-function(x){
g<-function(y){
y+z
}
z<-4
x+g(x)
}
z<-10
f(3)
fff
install.packages("swirl")
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1, 9, 3.14)
?c
z
c("z",555)
c("z",555,"z")
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
c(1, 2, 3, 4) + c(0, 10, 1000)
info()
c(1, 2, 3, 4) + c(0, 10, 1000)
z * 2 + 100
z * 2 + 1000
my_div
5+7
info()
main()
main()
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1, 9, 3.14)
z
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
main()
swirl()
1:20
pi:10
15:1
?':'
seq()
seq(1,20)
seq(0,10, by=0.5)
my_seq<-seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along=myseq)
seq(along=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0, 1, 2), times =10)
rep(c(0, 1, 2), each =10)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vec>=6
num_vect>=6
my_char<-c("My","name","is")
my_char
paste(my_char,collapse="")
paste(my_char,collapse=" ")
c(my_char,"your_name_here")
c(my_char,"Ariful")
c(my_char,Ariful)
my_name <- c(my_char, "Swirl"
)
my_name
paste(my_name, collapse=" ")
paste("Hello", "world!",)
paste("Hello", "world!",sep=" ")
paste(c(1:3),c("X","Y","Z",sep="")
)
paste(1:3,c("X","Y","Z",sep="")
)
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x<-c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x
x[3,5,7]
cv<-c(3,5,7)
cv<-[c(3,5,7)]
cv<-x[c(3,5,7)]
c(3,5,7)
info()
nxt()
x[3]
a<-c(3,5,7)
a<-[c(3,5,7)]
a=[c(3,5,7)]
a=c(3,5,7)
a<-c(3,5,7)
a<-c(3,5,7)
[c(3,5,7)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(2, 10)]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vec
vect
names(vect)
vect<-names(vect)
vect2<-names(vect)
vect2<-c(11,2,Na)
vect2<-c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
indentical(vect, vect2)
identical()
identical(vect)
identical(vect, vect2)
vct["bar"]
vect["bar"]
vect[c("foo", "bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vecytor
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix(1:20, nrow=4, ncol=5)
my_matrix<-c(1:20, nrow=4, ncol=5)
my_matrix<-matrix(1:20, nrow=4, ncol=5)
my_matrix<-matrix(c(1:20), nrow=4, ncol=5)
my_matrix<-matrix(data=1:20
, nrow=4, ncol=5)
my_matrix2<-matrix(data=1:20, nrow=4, ncol=5)
indentical(my_matrix, my_matrix2)
indentical(my_matrix, my_matrix2)
indentical(my_matrix)
identical
identical(my_matrix, my_matrix2)
c(Bill, Gina, Kelly, Sean)
c("Bill", "Gina", "Kelly", "Sean")
patients<-c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<-c( "patient",
| "age", "weight", "bp", "rating", "test")
cnames<-c( "patient", "age", "weight", "bp", "rating", "test")
my_data<-colnames(cnames)
colnames(my_data)<-cnames
my_data
bye()
bye()
1+2
View(my_matrix2)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
#install.packages("AppliedPredictiveModeling")
#install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
View(test)
View(train)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
View(training)
View(testing)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(training)
View(testing)
plot(training$CompressiveStrength,training$row.names)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$SuperPlasticizer )
View(training)
hist(as.numeric(training$SuperPlasticizer) )
training$SuperPlasticizer<-as.numeric(training$SuperPlasticizer)
hist(training$SuperPlasticizer )
View(training)
training$SuperPlasticizer<-as.numeric(training$SuperPlasticizer)
SuperPlasticizer<-as.numeric(training$SuperPlasticizer)
hist(SuperPlasticizer )
hist(cut2(SuperPlasticizer) )
install.packages(" Hmisc")
install.packages(" hmisc")
x <- c(0.18, -1.54, 0.42, 0.95)
w <- tr(c(2, 1, 3, 1))
x <- c(0.18, -1.54, 0.42, 0.95)
w <- t(c(2, 1, 3, 1))
w
x
x%*%w
w%*%x
w%*%x/sum(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
reg1<-lm(y~x)
reg1
par(cex=.8)
plot(read, write)
abline(reg1)
par(cex=.8)
plot(x, y)
abline(reg1)
reg1<-lm(y~x)
#par(cex=.8)
plot(x, y)
abline(reg1)
par(cex=.0)
plot(x, y)
abline(reg1)
plot(x, y)
abline(reg1)
data(mtcars)
str(mtcars)
reg2<-lm("mpg"~"weight")
reg2<-lm("mpg"~"weight", data=mtcars)
reg2<-lm(mpg ~ weight, data=mtcars)
reg2<-lm(mpg ~ wt, data=mtcars)
reg2
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(x)
mean(x)-8.58
(x-mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
mean(x)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
mean(temp)
1*.1+2*.2+3*.3+4*.4
mn<-1100
s<-30
n<-9
mn + c(-1, 1) * qt(0.975, n - 1) * s/sqrt(n)
difference<- -2
n<-9
sd(difference)
rm(list=ls())
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
dTable(airquality, sPaginationType = "full_numbers")
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
load(rChart)
load(rCharts)
library(rCharts)
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
show
dgamma
colSum
lm
getClass()
?getClass()
getS3method()
?getS3method()
?getMethod()
?showMethods()
install.packages("https://d396qusza40orc.cloudfront.net/devdataprod/DDPQuiz3_1.0.zip")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
library(rcharts)
library(rCharts)
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
shiny::runApp()
x <- c(1:9, 8:1)
y <- c(1, 2*(5:3), 2, -1, 17, 9, 8, 2:9)
op <- par(mfcol = c(3, 1))
for(xpd in c(FALSE, TRUE, NA)) {
plot(1:10, main = paste("xpd =", xpd))
box("figure", col = "pink", lwd = 3)
polygon(x, y, xpd = xpd, col = "orange", lty = 2, lwd = 2, border = "red")
}
par(op)
n <- 100
xx <- c(0:n, n:0)
yy <- c(c(0, cumsum(stats::rnorm(n))), rev(c(0, cumsum(stats::rnorm(n)))))
plot   (xx, yy, type = "n", xlab = "Time", ylab = "Distance")
polygon(xx, yy, col = "gray", border = "red")
title("Distance Between Brownian Motions")
# Multiple polygons from NA values
# and recycling of col, border, and lty
op <- par(mfrow = c(2, 1))
plot(c(1, 9), 1:2, type = "n")
polygon(1:9, c(2,1,2,1,1,2,1,2,1),
col = c("red", "blue"),
border = c("green", "yellow"),
lwd = 3, lty = c("dashed", "solid"))
plot(c(1, 9), 1:2, type = "n")
polygon(1:9, c(2,1,2,1,NA,2,1,2,1),
col = c("red", "blue"),
border = c("green", "yellow"),
lwd = 3, lty = c("dashed", "solid"))
par(op)
rm(list=ls())
```
trControl = trainControl(method = "cv", number = 10),
rm(list=ls())
getwd()
setwd("C:\\Users\\TCS Profile\\Desktop\\Folders\\coursera\\CreateDataPackages\\imageProcessing")
install.packages("tiff")
library(tiff)
